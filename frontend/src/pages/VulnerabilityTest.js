import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import axios from 'axios';

const VulnerabilityContainer = styled.div`
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
`;

const PageTitle = styled.h1`
  font-size: 2.5rem;
  color: #00ff00;
  text-align: center;
  margin-bottom: 40px;
  text-shadow: 0 0 15px rgba(0, 255, 0, 0.5);
`;

const TestsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
  gap: 30px;
  margin-bottom: 40px;
`;

const TestCard = styled.div`
  background: rgba(255, 255, 255, 0.05);
  border-radius: 15px;
  padding: 30px;
  border: 1px solid rgba(0, 255, 0, 0.2);
`;

const TestTitle = styled.h2`
  color: #00ff00;
  font-size: 1.5rem;
  margin-bottom: 20px;
`;

const TestDescription = styled.p`
  color: #cccccc;
  margin-bottom: 20px;
  line-height: 1.6;
`;

const TestForm = styled.form`
  display: flex;
  flex-direction: column;
  gap: 15px;
`;

const TestInput = styled.input`
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(0, 255, 0, 0.3);
  border-radius: 8px;
  padding: 10px 15px;
  color: #ffffff;
  font-size: 14px;
  
  &::placeholder {
    color: rgba(255, 255, 255, 0.5);
  }
`;

const TestTextArea = styled.textarea`
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(0, 255, 0, 0.3);
  border-radius: 8px;
  padding: 10px 15px;
  color: #ffffff;
  font-size: 14px;
  min-height: 100px;
  resize: vertical;
  
  &::placeholder {
    color: rgba(255, 255, 255, 0.5);
  }
`;

const TestButton = styled.button`
  background: linear-gradient(45deg, #ff0040, #ff6600);
  color: #ffffff;
  border: none;
  padding: 10px 20px;
  border-radius: 20px;
  font-size: 14px;
  font-weight: 600;
  transition: all 0.3s ease;
  
  &:hover {
    background: linear-gradient(45deg, #ff6600, #ff0040);
    transform: translateY(-1px);
  }
`;

const TestResult = styled.div`
  margin-top: 20px;
  padding: 15px;
  border-radius: 8px;
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(0, 255, 0, 0.3);
  color: #ffffff;
  font-family: monospace;
  font-size: 14px;
  white-space: pre-wrap;
  max-height: 200px;
  overflow-y: auto;
`;

const ExampleSection = styled.div`
  margin-top: 20px;
  padding: 15px;
  background: rgba(255, 165, 0, 0.1);
  border: 1px solid rgba(255, 165, 0, 0.3);
  border-radius: 8px;
`;

const ExampleTitle = styled.h4`
  color: #ffaa00;
  margin-bottom: 10px;
`;

const ExampleCode = styled.code`
  color: #ffaa00;
  background: rgba(0, 0, 0, 0.3);
  padding: 2px 6px;
  border-radius: 4px;
  font-family: monospace;
`;

const WarningBox = styled.div`
  background: rgba(255, 0, 64, 0.1);
  border: 1px solid rgba(255, 0, 64, 0.3);
  border-radius: 10px;
  padding: 20px;
  margin-bottom: 30px;
  text-align: center;
`;

const WarningTitle = styled.h3`
  color: #ff0040;
  margin-bottom: 10px;
`;

const WarningText = styled.p`
  color: #cccccc;
  line-height: 1.6;
`;

const VulnerabilityTest = () => {
  const [results, setResults] = useState({});
  const [loading, setLoading] = useState({});

  // Command Injection Test
  const [cmdInput, setCmdInput] = useState('');
  
  // XSS Test
  const [xssInput, setXssInput] = useState('');
  
  // Race Condition Test
  const [raceProduct, setRaceProduct] = useState('1');
  const [raceQuantity, setRaceQuantity] = useState('10');
  
  // File Upload Test
  const [filename, setFilename] = useState('');
  const [fileContent, setFileContent] = useState('');

  const handleCommandInjection = async (e) => {
    e.preventDefault();
    setLoading(prev => ({ ...prev, cmd: true }));
    
    try {
      const response = await axios.get(`/api/search?q=${encodeURIComponent(cmdInput)}`);
      setResults(prev => ({ 
        ...prev, 
        cmd: `검색 결과: ${JSON.stringify(response.data, null, 2)}` 
      }));
    } catch (error) {
      setResults(prev => ({ 
        ...prev, 
        cmd: `오류: ${error.response?.data?.error || error.message}` 
      }));
    } finally {
      setLoading(prev => ({ ...prev, cmd: false }));
    }
  };

  const handleXSSTest = async (e) => {
    e.preventDefault();
    setLoading(prev => ({ ...prev, xss: true }));
    
    try {
      const response = await axios.get(`/api/profile?name=${encodeURIComponent(xssInput)}`);
      // XSS 결과를 안전하게 표시
      setResults(prev => ({ 
        ...prev, 
        xss: `프로필 페이지 응답:\n${response.data}`
      }));
    } catch (error) {
      setResults(prev => ({ 
        ...prev, 
        xss: `오류: ${error.response?.data?.error || error.message}` 
      }));
    } finally {
      setLoading(prev => ({ ...prev, xss: false }));
    }
  };

  const handleRaceCondition = async (e) => {
    e.preventDefault();
    setLoading(prev => ({ ...prev, race: true }));
    
    const orderData = {
      productId: raceProduct,
      quantity: parseInt(raceQuantity),
      userInfo: {
        name: 'Test User',
        email: 'test@example.com',
        phone: '010-1234-5678',
        address: 'Test Address'
      }
    };

    try {
      // 동시에 여러 주문 요청 보내기
      const promises = Array(5).fill().map((_, i) => 
        axios.post('/api/order', orderData)
          .then(res => ({ success: true, order: res.data.order?.id || 'unknown', attempt: i + 1 }))
          .catch(err => ({ success: false, error: err.response?.data?.error || err.message, attempt: i + 1 }))
      );

      const results = await Promise.all(promises);
      const successCount = results.filter(r => r.success).length;
      
      setResults(prev => ({ 
        ...prev, 
        race: `Race Condition 테스트 결과:\n` +
              `총 5개 요청 중 ${successCount}개 성공\n` +
              `결과 상세:\n` +
              results.map(r => 
                `시도 ${r.attempt}: ${r.success ? `성공 (주문 ID: ${r.order})` : `실패 (${r.error})`}`
              ).join('\n')
      }));
    } catch (error) {
      setResults(prev => ({ 
        ...prev, 
        race: `오류: ${error.message}` 
      }));
    } finally {
      setLoading(prev => ({ ...prev, race: false }));
    }
  };

  const handleFileUpload = async (e) => {
    e.preventDefault();
    setLoading(prev => ({ ...prev, file: true }));
    
    try {
      const response = await axios.post('/api/upload', {
        filename: filename,
        content: fileContent
      });
      
      setResults(prev => ({ 
        ...prev, 
        file: `파일 업로드 결과:\n${JSON.stringify(response.data, null, 2)}`
      }));
    } catch (error) {
      setResults(prev => ({ 
        ...prev, 
        file: `오류: ${error.response?.data?.error || error.message}` 
      }));
    } finally {
      setLoading(prev => ({ ...prev, file: false }));
    }
  };

  return (
    <VulnerabilityContainer>
      <PageTitle>🔓 보안 취약점 테스트</PageTitle>
      
      <WarningBox>
        <WarningTitle>⚠️ 교육용 취약점 테스트</WarningTitle>
        <WarningText>
          이 페이지는 보안 교육을 위한 것입니다. 실제 서비스에서는 절대 시도하지 마세요.<br/>
          모든 테스트는 통제된 환경에서 수행되며, 실제 시스템에 피해를 주지 않습니다.
        </WarningText>
      </WarningBox>

      <TestsGrid>
        {/* Command Injection Test */}
        <TestCard>
          <TestTitle>💉 Command Injection</TestTitle>
          <TestDescription>
            검색 기능에서 명령어 주입 취약점을 테스트합니다.
            백엔드에서 사용자 입력을 shell 명령어에 직접 삽입하는 취약점입니다.
          </TestDescription>
          
          <TestForm onSubmit={handleCommandInjection}>
            <TestInput
              type="text"
              value={cmdInput}
              onChange={(e) => setCmdInput(e.target.value)}
              placeholder="검색어를 입력하세요"
            />
            <TestButton type="submit" disabled={loading.cmd}>
              {loading.cmd ? '테스트 중...' : '테스트 실행'}
            </TestButton>
          </TestForm>
          
          <ExampleSection>
            <ExampleTitle>예시 페이로드:</ExampleTitle>
            <div>
              <ExampleCode>"; ls -la; echo "</ExampleCode><br/>
              <ExampleCode>"; cat /etc/passwd; echo "</ExampleCode><br/>
              <ExampleCode>"; whoami; echo "</ExampleCode>
            </div>
          </ExampleSection>
          
          {results.cmd && (
            <TestResult>{results.cmd}</TestResult>
          )}
        </TestCard>

        {/* XSS Test */}
        <TestCard>
          <TestTitle>🔗 Cross-Site Scripting (XSS)</TestTitle>
          <TestDescription>
            사용자 프로필 페이지에서 XSS 취약점을 테스트합니다.
            사용자 입력이 HTML에 직접 삽입되는 취약점입니다.
          </TestDescription>
          
          <TestForm onSubmit={handleXSSTest}>
            <TestInput
              type="text"
              value={xssInput}
              onChange={(e) => setXssInput(e.target.value)}
              placeholder="이름을 입력하세요"
            />
            <TestButton type="submit" disabled={loading.xss}>
              {loading.xss ? '테스트 중...' : '테스트 실행'}
            </TestButton>
          </TestForm>
          
          <ExampleSection>
            <ExampleTitle>예시 페이로드:</ExampleTitle>
            <div>
              <ExampleCode>&lt;script&gt;alert('XSS')&lt;/script&gt;</ExampleCode><br/>
              <ExampleCode>&lt;img src=x onerror=alert('XSS')&gt;</ExampleCode><br/>
              <ExampleCode>&lt;svg onload=alert('XSS')&gt;</ExampleCode>
            </div>
          </ExampleSection>
          
          {results.xss && (
            <TestResult>{results.xss}</TestResult>
          )}
        </TestCard>

        {/* Race Condition Test */}
        <TestCard>
          <TestTitle>🏃 Race Condition</TestTitle>
          <TestDescription>
            주문 시스템에서 동시성 문제를 테스트합니다.
            여러 요청이 동시에 처리될 때 발생하는 경쟁 조건을 테스트합니다.
          </TestDescription>
          
          <TestForm onSubmit={handleRaceCondition}>
            <TestInput
              type="number"
              value={raceProduct}
              onChange={(e) => setRaceProduct(e.target.value)}
              placeholder="상품 ID (1-10)"
              min="1"
              max="10"
            />
            <TestInput
              type="number"
              value={raceQuantity}
              onChange={(e) => setRaceQuantity(e.target.value)}
              placeholder="주문 수량"
              min="1"
            />
            <TestButton type="submit" disabled={loading.race}>
              {loading.race ? '테스트 중...' : '동시 주문 테스트'}
            </TestButton>
          </TestForm>
          
          <ExampleSection>
            <ExampleTitle>테스트 설명:</ExampleTitle>
            <div>
              5개의 동일한 주문 요청을 동시에 전송하여<br/>
              재고 관리 시스템의 동시성 문제를 확인합니다.
            </div>
          </ExampleSection>
          
          {results.race && (
            <TestResult>{results.race}</TestResult>
          )}
        </TestCard>

        {/* File Upload Test */}
        <TestCard>
          <TestTitle>📁 Path Traversal</TestTitle>
          <TestDescription>
            파일 업로드 기능에서 경로 탐색 취약점을 테스트합니다.
            상대 경로를 사용하여 의도하지 않은 위치에 파일을 업로드하는 취약점입니다.
          </TestDescription>
          
          <TestForm onSubmit={handleFileUpload}>
            <TestInput
              type="text"
              value={filename}
              onChange={(e) => setFilename(e.target.value)}
              placeholder="파일명을 입력하세요"
            />
            <TestTextArea
              value={fileContent}
              onChange={(e) => setFileContent(e.target.value)}
              placeholder="파일 내용을 입력하세요"
            />
            <TestButton type="submit" disabled={loading.file}>
              {loading.file ? '업로드 중...' : '파일 업로드'}
            </TestButton>
          </TestForm>
          
          <ExampleSection>
            <ExampleTitle>예시 페이로드:</ExampleTitle>
            <div>
              <ExampleCode>../../../etc/passwd</ExampleCode><br/>
              <ExampleCode>..\\..\\..\\windows\\system32\\drivers\\etc\\hosts</ExampleCode><br/>
              <ExampleCode>../../../tmp/test.txt</ExampleCode>
            </div>
          </ExampleSection>
          
          {results.file && (
            <TestResult>{results.file}</TestResult>
          )}
        </TestCard>
      </TestsGrid>
    </VulnerabilityContainer>
  );
};

export default VulnerabilityTest;
